function [response, stim] = simulate_CF6_ParametricFeatures_Softmax(nTrials, bias, beta)
% [response, stim] = simulate_CF6_ParametricFeatures_Softmax(nTrials, bias, beta)
%
% INPUTS:
% T - number of trials
% bias - value between 0 and inf (unlikely to be higher than 10)
% beta - inverse temperature for softmax argument (equivalent to level of
% stochastisticy in choice behavior: range from 0 [completely random] to inf [deterministic])
% 
% OUTPUTS:
% response - list of agent responses for each trial
% stim - list of stimuli presented to the agent
%
%
% Stephen Town: 18 August 2019

% Define response probability as function of stimulus
transfer_fun = @(x) (2.*x) + 1;

% Randomly generate stimuli from a uniform distribution (can change later)
stim_limits = [-180 180];
stim = (rand(nTrials, 1) .* diff(stim_limits)) + min(stim_limits); % <=Change distribution of stimuli here

p_response(:,1) = transfer_fun(stim);
p_response(:,2) = p_response(:,1  
% The line above is a key assumption that the response likelihoods are opposite
% for two actions, but I'm not sure whether this is correct or what it's
% implication are

% Define probability of response (2 possible actions)
nActions = 2;
response_idx = 1 : nActions;
p_response = nan(nTrials, nActions);

% Define probability of making correct response (1 = correct, 2 = error)
% (spread lapses equally over all options - could be modified later to create specific patterns of errors for localization)
p_correct = [1 0];

% For each stimulus
for i = 1 : n_stim
    
    i_idx = trial_idx(i)+1 : trial_idx(i+1);    % Trial index 
    
    stim(i_idx) = i;    % Assign stimulus identity

	col = response_idx == i; 	% Assumes stim_1 corresponds to action 1, stim 2 to action 2 etc
    p_response(i_idx, col) = p_correct(1);
	p_response(i_idx, ~col) = p_correct(2);
end

% Apply bias
p_response(:, 1) = p_response(:, 1) + bias;		% Assumes bias applies to first action
p_response(:, 2:end) = p_response(:, 2:end) - (bias / (nActions-1));	% Again spreading bias equally across all other actions

% For each trial
for trial = 1 : nTrials    
    
    Q = p_response(trial,:);
    
    trial_p = exp(beta.*Q) / sum(exp(beta.*Q));   % softmax
    
    response(trial) = choose(trial_p);    
end
